//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Fund = newFundTable("public", "fund", "")

type fundTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	Name               postgres.ColumnString
	Currency           postgres.ColumnString
	Isin               postgres.ColumnString
	TotalHoldings      postgres.ColumnFloat
	Price              postgres.ColumnFloat
	Provider           postgres.ColumnString
	ExternalIdentifier postgres.ColumnString
	OutstandingShares  postgres.ColumnFloat
	EffectiveDate      postgres.ColumnDate

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FundTable struct {
	fundTable

	EXCLUDED fundTable
}

// AS creates new FundTable with assigned alias
func (a FundTable) AS(alias string) *FundTable {
	return newFundTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FundTable with assigned schema name
func (a FundTable) FromSchema(schemaName string) *FundTable {
	return newFundTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FundTable with assigned table prefix
func (a FundTable) WithPrefix(prefix string) *FundTable {
	return newFundTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FundTable with assigned table suffix
func (a FundTable) WithSuffix(suffix string) *FundTable {
	return newFundTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFundTable(schemaName, tableName, alias string) *FundTable {
	return &FundTable{
		fundTable: newFundTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newFundTableImpl("", "excluded", ""),
	}
}

func newFundTableImpl(schemaName, tableName, alias string) fundTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		NameColumn               = postgres.StringColumn("name")
		CurrencyColumn           = postgres.StringColumn("currency")
		IsinColumn               = postgres.StringColumn("isin")
		TotalHoldingsColumn      = postgres.FloatColumn("total_holdings")
		PriceColumn              = postgres.FloatColumn("price")
		ProviderColumn           = postgres.StringColumn("provider")
		ExternalIdentifierColumn = postgres.StringColumn("external_identifier")
		OutstandingSharesColumn  = postgres.FloatColumn("outstanding_shares")
		EffectiveDateColumn      = postgres.DateColumn("effective_date")
		allColumns               = postgres.ColumnList{IDColumn, NameColumn, CurrencyColumn, IsinColumn, TotalHoldingsColumn, PriceColumn, ProviderColumn, ExternalIdentifierColumn, OutstandingSharesColumn, EffectiveDateColumn}
		mutableColumns           = postgres.ColumnList{NameColumn, CurrencyColumn, IsinColumn, TotalHoldingsColumn, PriceColumn, ProviderColumn, ExternalIdentifierColumn, OutstandingSharesColumn, EffectiveDateColumn}
	)

	return fundTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Name:               NameColumn,
		Currency:           CurrencyColumn,
		Isin:               IsinColumn,
		TotalHoldings:      TotalHoldingsColumn,
		Price:              PriceColumn,
		Provider:           ProviderColumn,
		ExternalIdentifier: ExternalIdentifierColumn,
		OutstandingShares:  OutstandingSharesColumn,
		EffectiveDate:      EffectiveDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
