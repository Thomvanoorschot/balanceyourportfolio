//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PortfolioFund = newPortfolioFundTable("public", "portfolio_fund", "")

type portfolioFundTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	PortfolioID postgres.ColumnString
	FundID      postgres.ColumnString
	Amount      postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PortfolioFundTable struct {
	portfolioFundTable

	EXCLUDED portfolioFundTable
}

// AS creates new PortfolioFundTable with assigned alias
func (a PortfolioFundTable) AS(alias string) *PortfolioFundTable {
	return newPortfolioFundTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PortfolioFundTable with assigned schema name
func (a PortfolioFundTable) FromSchema(schemaName string) *PortfolioFundTable {
	return newPortfolioFundTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PortfolioFundTable with assigned table prefix
func (a PortfolioFundTable) WithPrefix(prefix string) *PortfolioFundTable {
	return newPortfolioFundTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PortfolioFundTable with assigned table suffix
func (a PortfolioFundTable) WithSuffix(suffix string) *PortfolioFundTable {
	return newPortfolioFundTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPortfolioFundTable(schemaName, tableName, alias string) *PortfolioFundTable {
	return &PortfolioFundTable{
		portfolioFundTable: newPortfolioFundTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newPortfolioFundTableImpl("", "excluded", ""),
	}
}

func newPortfolioFundTableImpl(schemaName, tableName, alias string) portfolioFundTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		PortfolioIDColumn = postgres.StringColumn("portfolio_id")
		FundIDColumn      = postgres.StringColumn("fund_id")
		AmountColumn      = postgres.FloatColumn("amount")
		allColumns        = postgres.ColumnList{IDColumn, PortfolioIDColumn, FundIDColumn, AmountColumn}
		mutableColumns    = postgres.ColumnList{PortfolioIDColumn, FundIDColumn, AmountColumn}
	)

	return portfolioFundTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		PortfolioID: PortfolioIDColumn,
		FundID:      FundIDColumn,
		Amount:      AmountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
