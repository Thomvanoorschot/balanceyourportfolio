//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FundHolding = newFundHoldingTable("public", "fund_holding", "")

type fundHoldingTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	FundID            postgres.ColumnString
	HoldingID         postgres.ColumnString
	Amount            postgres.ColumnFloat
	PercentageOfTotal postgres.ColumnFloat
	MarketValue       postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FundHoldingTable struct {
	fundHoldingTable

	EXCLUDED fundHoldingTable
}

// AS creates new FundHoldingTable with assigned alias
func (a FundHoldingTable) AS(alias string) *FundHoldingTable {
	return newFundHoldingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FundHoldingTable with assigned schema name
func (a FundHoldingTable) FromSchema(schemaName string) *FundHoldingTable {
	return newFundHoldingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FundHoldingTable with assigned table prefix
func (a FundHoldingTable) WithPrefix(prefix string) *FundHoldingTable {
	return newFundHoldingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FundHoldingTable with assigned table suffix
func (a FundHoldingTable) WithSuffix(suffix string) *FundHoldingTable {
	return newFundHoldingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFundHoldingTable(schemaName, tableName, alias string) *FundHoldingTable {
	return &FundHoldingTable{
		fundHoldingTable: newFundHoldingTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newFundHoldingTableImpl("", "excluded", ""),
	}
}

func newFundHoldingTableImpl(schemaName, tableName, alias string) fundHoldingTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		FundIDColumn            = postgres.StringColumn("fund_id")
		HoldingIDColumn         = postgres.StringColumn("holding_id")
		AmountColumn            = postgres.FloatColumn("amount")
		PercentageOfTotalColumn = postgres.FloatColumn("percentage_of_total")
		MarketValueColumn       = postgres.FloatColumn("market_value")
		allColumns              = postgres.ColumnList{IDColumn, FundIDColumn, HoldingIDColumn, AmountColumn, PercentageOfTotalColumn, MarketValueColumn}
		mutableColumns          = postgres.ColumnList{FundIDColumn, HoldingIDColumn, AmountColumn, PercentageOfTotalColumn, MarketValueColumn}
	)

	return fundHoldingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		FundID:            FundIDColumn,
		HoldingID:         HoldingIDColumn,
		Amount:            AmountColumn,
		PercentageOfTotal: PercentageOfTotalColumn,
		MarketValue:       MarketValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
