//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Portfolio = newPortfolioTable("public", "portfolio", "")

type portfolioTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnString
	UserID postgres.ColumnString
	Name   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PortfolioTable struct {
	portfolioTable

	EXCLUDED portfolioTable
}

// AS creates new PortfolioTable with assigned alias
func (a PortfolioTable) AS(alias string) *PortfolioTable {
	return newPortfolioTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PortfolioTable with assigned schema name
func (a PortfolioTable) FromSchema(schemaName string) *PortfolioTable {
	return newPortfolioTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PortfolioTable with assigned table prefix
func (a PortfolioTable) WithPrefix(prefix string) *PortfolioTable {
	return newPortfolioTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PortfolioTable with assigned table suffix
func (a PortfolioTable) WithSuffix(suffix string) *PortfolioTable {
	return newPortfolioTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPortfolioTable(schemaName, tableName, alias string) *PortfolioTable {
	return &PortfolioTable{
		portfolioTable: newPortfolioTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newPortfolioTableImpl("", "excluded", ""),
	}
}

func newPortfolioTableImpl(schemaName, tableName, alias string) portfolioTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		UserIDColumn   = postgres.StringColumn("user_id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{UserIDColumn, NameColumn}
	)

	return portfolioTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		UserID: UserIDColumn,
		Name:   NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
