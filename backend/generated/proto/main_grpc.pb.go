// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FundServiceClient is the client API for FundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundServiceClient interface {
	GetDetails(ctx context.Context, in *FundDetailsRequest, opts ...grpc.CallOption) (*FundDetailsResponse, error)
	SearchFunds(ctx context.Context, in *SearchFundsRequest, opts ...grpc.CallOption) (*SearchFundsResponse, error)
	FilterHoldings(ctx context.Context, in *FilterFundHoldingsRequest, opts ...grpc.CallOption) (*FilterFundHoldingsResponse, error)
	FilterFunds(ctx context.Context, in *FilterFundsRequest, opts ...grpc.CallOption) (*FilterFundsResponse, error)
	CompareFunds(ctx context.Context, in *CompareFundRequest, opts ...grpc.CallOption) (*CompareFundResponse, error)
}

type fundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundServiceClient(cc grpc.ClientConnInterface) FundServiceClient {
	return &fundServiceClient{cc}
}

func (c *fundServiceClient) GetDetails(ctx context.Context, in *FundDetailsRequest, opts ...grpc.CallOption) (*FundDetailsResponse, error) {
	out := new(FundDetailsResponse)
	err := c.cc.Invoke(ctx, "/proto.FundService/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) SearchFunds(ctx context.Context, in *SearchFundsRequest, opts ...grpc.CallOption) (*SearchFundsResponse, error) {
	out := new(SearchFundsResponse)
	err := c.cc.Invoke(ctx, "/proto.FundService/SearchFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) FilterHoldings(ctx context.Context, in *FilterFundHoldingsRequest, opts ...grpc.CallOption) (*FilterFundHoldingsResponse, error) {
	out := new(FilterFundHoldingsResponse)
	err := c.cc.Invoke(ctx, "/proto.FundService/FilterHoldings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) FilterFunds(ctx context.Context, in *FilterFundsRequest, opts ...grpc.CallOption) (*FilterFundsResponse, error) {
	out := new(FilterFundsResponse)
	err := c.cc.Invoke(ctx, "/proto.FundService/FilterFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) CompareFunds(ctx context.Context, in *CompareFundRequest, opts ...grpc.CallOption) (*CompareFundResponse, error) {
	out := new(CompareFundResponse)
	err := c.cc.Invoke(ctx, "/proto.FundService/CompareFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundServiceServer is the server API for FundService service.
// All implementations must embed UnimplementedFundServiceServer
// for forward compatibility
type FundServiceServer interface {
	GetDetails(context.Context, *FundDetailsRequest) (*FundDetailsResponse, error)
	SearchFunds(context.Context, *SearchFundsRequest) (*SearchFundsResponse, error)
	FilterHoldings(context.Context, *FilterFundHoldingsRequest) (*FilterFundHoldingsResponse, error)
	FilterFunds(context.Context, *FilterFundsRequest) (*FilterFundsResponse, error)
	CompareFunds(context.Context, *CompareFundRequest) (*CompareFundResponse, error)
	mustEmbedUnimplementedFundServiceServer()
}

// UnimplementedFundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFundServiceServer struct {
}

func (UnimplementedFundServiceServer) GetDetails(context.Context, *FundDetailsRequest) (*FundDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedFundServiceServer) SearchFunds(context.Context, *SearchFundsRequest) (*SearchFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFunds not implemented")
}
func (UnimplementedFundServiceServer) FilterHoldings(context.Context, *FilterFundHoldingsRequest) (*FilterFundHoldingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterHoldings not implemented")
}
func (UnimplementedFundServiceServer) FilterFunds(context.Context, *FilterFundsRequest) (*FilterFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterFunds not implemented")
}
func (UnimplementedFundServiceServer) CompareFunds(context.Context, *CompareFundRequest) (*CompareFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareFunds not implemented")
}
func (UnimplementedFundServiceServer) mustEmbedUnimplementedFundServiceServer() {}

// UnsafeFundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundServiceServer will
// result in compilation errors.
type UnsafeFundServiceServer interface {
	mustEmbedUnimplementedFundServiceServer()
}

func RegisterFundServiceServer(s grpc.ServiceRegistrar, srv FundServiceServer) {
	s.RegisterService(&FundService_ServiceDesc, srv)
}

func _FundService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundService/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).GetDetails(ctx, req.(*FundDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_SearchFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).SearchFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundService/SearchFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).SearchFunds(ctx, req.(*SearchFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_FilterHoldings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterFundHoldingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).FilterHoldings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundService/FilterHoldings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).FilterHoldings(ctx, req.(*FilterFundHoldingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_FilterFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).FilterFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundService/FilterFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).FilterFunds(ctx, req.(*FilterFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_CompareFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).CompareFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundService/CompareFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).CompareFunds(ctx, req.(*CompareFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FundService_ServiceDesc is the grpc.ServiceDesc for FundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FundService",
	HandlerType: (*FundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetails",
			Handler:    _FundService_GetDetails_Handler,
		},
		{
			MethodName: "SearchFunds",
			Handler:    _FundService_SearchFunds_Handler,
		},
		{
			MethodName: "FilterHoldings",
			Handler:    _FundService_FilterHoldings_Handler,
		},
		{
			MethodName: "FilterFunds",
			Handler:    _FundService_FilterFunds_Handler,
		},
		{
			MethodName: "CompareFunds",
			Handler:    _FundService_CompareFunds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// PortfolioServiceClient is the client API for PortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioServiceClient interface {
	GetPortfolios(ctx context.Context, in *PortfoliosRequest, opts ...grpc.CallOption) (*PortfoliosResponse, error)
	UpsertPortfolio(ctx context.Context, in *UpsertPortfolioRequest, opts ...grpc.CallOption) (*UpsertPortfolioResponse, error)
	UpdatePortfolioFundAmount(ctx context.Context, in *UpdatePortfolioFundAmountRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPortfolioDetails(ctx context.Context, in *PortfolioDetailsRequest, opts ...grpc.CallOption) (*PortfolioDetailsResponse, error)
	FilterPortfolioHoldings(ctx context.Context, in *FilterPortfolioFundHoldingsRequest, opts ...grpc.CallOption) (*FilterPortfolioFundHoldingsResponse, error)
}

type portfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioServiceClient(cc grpc.ClientConnInterface) PortfolioServiceClient {
	return &portfolioServiceClient{cc}
}

func (c *portfolioServiceClient) GetPortfolios(ctx context.Context, in *PortfoliosRequest, opts ...grpc.CallOption) (*PortfoliosResponse, error) {
	out := new(PortfoliosResponse)
	err := c.cc.Invoke(ctx, "/proto.PortfolioService/GetPortfolios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpsertPortfolio(ctx context.Context, in *UpsertPortfolioRequest, opts ...grpc.CallOption) (*UpsertPortfolioResponse, error) {
	out := new(UpsertPortfolioResponse)
	err := c.cc.Invoke(ctx, "/proto.PortfolioService/UpsertPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpdatePortfolioFundAmount(ctx context.Context, in *UpdatePortfolioFundAmountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.PortfolioService/UpdatePortfolioFundAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetPortfolioDetails(ctx context.Context, in *PortfolioDetailsRequest, opts ...grpc.CallOption) (*PortfolioDetailsResponse, error) {
	out := new(PortfolioDetailsResponse)
	err := c.cc.Invoke(ctx, "/proto.PortfolioService/GetPortfolioDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) FilterPortfolioHoldings(ctx context.Context, in *FilterPortfolioFundHoldingsRequest, opts ...grpc.CallOption) (*FilterPortfolioFundHoldingsResponse, error) {
	out := new(FilterPortfolioFundHoldingsResponse)
	err := c.cc.Invoke(ctx, "/proto.PortfolioService/FilterPortfolioHoldings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServiceServer is the server API for PortfolioService service.
// All implementations must embed UnimplementedPortfolioServiceServer
// for forward compatibility
type PortfolioServiceServer interface {
	GetPortfolios(context.Context, *PortfoliosRequest) (*PortfoliosResponse, error)
	UpsertPortfolio(context.Context, *UpsertPortfolioRequest) (*UpsertPortfolioResponse, error)
	UpdatePortfolioFundAmount(context.Context, *UpdatePortfolioFundAmountRequest) (*Empty, error)
	GetPortfolioDetails(context.Context, *PortfolioDetailsRequest) (*PortfolioDetailsResponse, error)
	FilterPortfolioHoldings(context.Context, *FilterPortfolioFundHoldingsRequest) (*FilterPortfolioFundHoldingsResponse, error)
	mustEmbedUnimplementedPortfolioServiceServer()
}

// UnimplementedPortfolioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioServiceServer struct {
}

func (UnimplementedPortfolioServiceServer) GetPortfolios(context.Context, *PortfoliosRequest) (*PortfoliosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolios not implemented")
}
func (UnimplementedPortfolioServiceServer) UpsertPortfolio(context.Context, *UpsertPortfolioRequest) (*UpsertPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) UpdatePortfolioFundAmount(context.Context, *UpdatePortfolioFundAmountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolioFundAmount not implemented")
}
func (UnimplementedPortfolioServiceServer) GetPortfolioDetails(context.Context, *PortfolioDetailsRequest) (*PortfolioDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioDetails not implemented")
}
func (UnimplementedPortfolioServiceServer) FilterPortfolioHoldings(context.Context, *FilterPortfolioFundHoldingsRequest) (*FilterPortfolioFundHoldingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterPortfolioHoldings not implemented")
}
func (UnimplementedPortfolioServiceServer) mustEmbedUnimplementedPortfolioServiceServer() {}

// UnsafePortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServiceServer will
// result in compilation errors.
type UnsafePortfolioServiceServer interface {
	mustEmbedUnimplementedPortfolioServiceServer()
}

func RegisterPortfolioServiceServer(s grpc.ServiceRegistrar, srv PortfolioServiceServer) {
	s.RegisterService(&PortfolioService_ServiceDesc, srv)
}

func _PortfolioService_GetPortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfoliosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetPortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortfolioService/GetPortfolios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetPortfolios(ctx, req.(*PortfoliosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpsertPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpsertPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortfolioService/UpsertPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpsertPortfolio(ctx, req.(*UpsertPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpdatePortfolioFundAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioFundAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpdatePortfolioFundAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortfolioService/UpdatePortfolioFundAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpdatePortfolioFundAmount(ctx, req.(*UpdatePortfolioFundAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetPortfolioDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetPortfolioDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortfolioService/GetPortfolioDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetPortfolioDetails(ctx, req.(*PortfolioDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_FilterPortfolioHoldings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterPortfolioFundHoldingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).FilterPortfolioHoldings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortfolioService/FilterPortfolioHoldings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).FilterPortfolioHoldings(ctx, req.(*FilterPortfolioFundHoldingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioService_ServiceDesc is the grpc.ServiceDesc for PortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PortfolioService",
	HandlerType: (*PortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPortfolios",
			Handler:    _PortfolioService_GetPortfolios_Handler,
		},
		{
			MethodName: "UpsertPortfolio",
			Handler:    _PortfolioService_UpsertPortfolio_Handler,
		},
		{
			MethodName: "UpdatePortfolioFundAmount",
			Handler:    _PortfolioService_UpdatePortfolioFundAmount_Handler,
		},
		{
			MethodName: "GetPortfolioDetails",
			Handler:    _PortfolioService_GetPortfolioDetails_Handler,
		},
		{
			MethodName: "FilterPortfolioHoldings",
			Handler:    _PortfolioService_FilterPortfolioHoldings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
