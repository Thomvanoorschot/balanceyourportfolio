//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FigiMapping = newFigiMappingTable("public", "figi_mapping", "")

type figiMappingTable struct {
	postgres.Table

	// Columns
	Figi   postgres.ColumnString
	Ticker postgres.ColumnString
	Name   postgres.ColumnString
	Isin   postgres.ColumnString
	Sedol  postgres.ColumnString
	Cusip  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FigiMappingTable struct {
	figiMappingTable

	EXCLUDED figiMappingTable
}

// AS creates new FigiMappingTable with assigned alias
func (a FigiMappingTable) AS(alias string) *FigiMappingTable {
	return newFigiMappingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FigiMappingTable with assigned schema name
func (a FigiMappingTable) FromSchema(schemaName string) *FigiMappingTable {
	return newFigiMappingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FigiMappingTable with assigned table prefix
func (a FigiMappingTable) WithPrefix(prefix string) *FigiMappingTable {
	return newFigiMappingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FigiMappingTable with assigned table suffix
func (a FigiMappingTable) WithSuffix(suffix string) *FigiMappingTable {
	return newFigiMappingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFigiMappingTable(schemaName, tableName, alias string) *FigiMappingTable {
	return &FigiMappingTable{
		figiMappingTable: newFigiMappingTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newFigiMappingTableImpl("", "excluded", ""),
	}
}

func newFigiMappingTableImpl(schemaName, tableName, alias string) figiMappingTable {
	var (
		FigiColumn     = postgres.StringColumn("figi")
		TickerColumn   = postgres.StringColumn("ticker")
		NameColumn     = postgres.StringColumn("name")
		IsinColumn     = postgres.StringColumn("isin")
		SedolColumn    = postgres.StringColumn("sedol")
		CusipColumn    = postgres.StringColumn("cusip")
		allColumns     = postgres.ColumnList{FigiColumn, TickerColumn, NameColumn, IsinColumn, SedolColumn, CusipColumn}
		mutableColumns = postgres.ColumnList{TickerColumn, NameColumn, IsinColumn, SedolColumn, CusipColumn}
	)

	return figiMappingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Figi:   FigiColumn,
		Ticker: TickerColumn,
		Name:   NameColumn,
		Isin:   IsinColumn,
		Sedol:  SedolColumn,
		Cusip:  CusipColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
