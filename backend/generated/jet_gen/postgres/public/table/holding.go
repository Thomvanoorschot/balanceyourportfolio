//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Holding = newHoldingTable("public", "holding", "")

type holdingTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnString
	Figi   postgres.ColumnString
	Type   postgres.ColumnString
	Sector postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type HoldingTable struct {
	holdingTable

	EXCLUDED holdingTable
}

// AS creates new HoldingTable with assigned alias
func (a HoldingTable) AS(alias string) *HoldingTable {
	return newHoldingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HoldingTable with assigned schema name
func (a HoldingTable) FromSchema(schemaName string) *HoldingTable {
	return newHoldingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HoldingTable with assigned table prefix
func (a HoldingTable) WithPrefix(prefix string) *HoldingTable {
	return newHoldingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HoldingTable with assigned table suffix
func (a HoldingTable) WithSuffix(suffix string) *HoldingTable {
	return newHoldingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHoldingTable(schemaName, tableName, alias string) *HoldingTable {
	return &HoldingTable{
		holdingTable: newHoldingTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newHoldingTableImpl("", "excluded", ""),
	}
}

func newHoldingTableImpl(schemaName, tableName, alias string) holdingTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		FigiColumn     = postgres.StringColumn("figi")
		TypeColumn     = postgres.StringColumn("type")
		SectorColumn   = postgres.StringColumn("sector")
		allColumns     = postgres.ColumnList{IDColumn, FigiColumn, TypeColumn, SectorColumn}
		mutableColumns = postgres.ColumnList{FigiColumn, TypeColumn, SectorColumn}
	)

	return holdingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Figi:   FigiColumn,
		Type:   TypeColumn,
		Sector: SectorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
